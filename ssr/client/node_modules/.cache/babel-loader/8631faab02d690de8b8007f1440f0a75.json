{"ast":null,"code":"/* eslint camelcase: 0 */ // @ts-nocheck\nimport{LOAD_GAMES,SUCCESS,GAME_ADDED,START,PLAYER_JOINED}from'../constants';import{OrderedMap,Record}from'immutable';import{arrToMap}from'../helpers/helpers';const ReducerState=Record({loading:false,entities:new OrderedMap({})});const GameRecord=Record({id:0,city:'',city_id:0,address:'',date:'',district:null,additional:'',players:0,activePlayers:1});const defaultState=new ReducerState();export default((gameState=defaultState,action)=>{const type=action.type,payload=action.payload;switch(type){case LOAD_GAMES+SUCCESS:if(!payload.data){return defaultState;}return gameState.update('entities',entities=>{return arrToMap(payload.data,GameRecord).sortBy(f=>f.get('date'));});case GAME_ADDED+START:return gameState.set('loading',true);case PLAYER_JOINED:console.log('player join in list',payload);const gameId=payload.gameId,activePlayers=payload.activePlayers;return gameState.updateIn(['entities',gameId],gameRecord=>{try{return gameRecord.set('activePlayers',activePlayers);}catch(e){console.log('not connected to list yet');}});case GAME_ADDED+SUCCESS:const _payload$data=payload.data,id=_payload$data.id,city_id=_payload$data.city_id;if(city_id!==payload.store.location.id){return gameState;}return gameState.setIn(['entities',id],new GameRecord(payload.data)).set('loading',false).update('entities',entities=>{return entities.sortBy(f=>f.get('date'));});default:return gameState;}});","map":{"version":3,"sources":["/Users/yaroslavudodov/Code/f4e/ssr/client/src/reducer/games.ts"],"names":["LOAD_GAMES","SUCCESS","GAME_ADDED","START","PLAYER_JOINED","OrderedMap","Record","arrToMap","ReducerState","loading","entities","GameRecord","id","city","city_id","address","date","district","additional","players","activePlayers","defaultState","gameState","action","type","payload","data","update","sortBy","f","get","set","console","log","gameId","updateIn","gameRecord","e","store","location","setIn"],"mappings":"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","sourcesContent":["/* eslint camelcase: 0 */\n// @ts-nocheck\nimport {\n  LOAD_GAMES,\n  SUCCESS,\n  GAME_ADDED,\n  START,\n  PLAYER_JOINED,\n} from '../constants';\nimport {OrderedMap, Record} from 'immutable';\nimport {arrToMap} from '../helpers/helpers';\n\nconst ReducerState = Record({\n  loading: false,\n  entities: new OrderedMap({}),\n});\n\nconst GameRecord = Record({\n  id: 0,\n  city: '',\n  city_id: 0,\n  address: '',\n  date: '',\n  district: null,\n  additional: '',\n  players: 0,\n  activePlayers: 1,\n});\n\nconst defaultState = new ReducerState();\n\nexport default (gameState = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n    case LOAD_GAMES + SUCCESS:\n      if (!payload.data) {\n        return defaultState;\n      }\n      return gameState.update('entities', (entities) => {\n        return arrToMap(payload.data, GameRecord).sortBy(\n            (f) => f.get('date')\n        );\n      });\n    case GAME_ADDED + START:\n      return gameState.set('loading', true);\n    case PLAYER_JOINED:\n      console.log('player join in list', payload);\n      const {gameId, activePlayers} = payload;\n      return gameState.updateIn(['entities', gameId], (gameRecord) => {\n        try {\n          return gameRecord.set('activePlayers', activePlayers);\n        } catch (e) {\n          console.log('not connected to list yet');\n        }\n      });\n    case GAME_ADDED + SUCCESS:\n      const {id, city_id} = payload.data;\n      if (city_id !== payload.store.location.id) {\n        return gameState;\n      }\n      return gameState\n          .setIn(['entities', id], new GameRecord(payload.data))\n          .set('loading', false)\n          .update('entities', (entities) => {\n            return entities.sortBy((f) => f.get('date'));\n          });\n    default:\n      return gameState;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}