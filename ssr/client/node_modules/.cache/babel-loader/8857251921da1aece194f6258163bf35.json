{"ast":null,"code":"// @ts-nocheck\nimport{OrderedMap,Record}from'immutable';import{GAME_CHAT_MESSAGE_ADDED,GAME_CHAT_MESSAGE_HISTORY}from'../constants';import{arrToMap}from'../helpers/helpers';const ReducerState=Record({loading:false,entities:new OrderedMap({})});const MessageRecord=Record({id:null,text:null,username:null,date:null});const defaultState=new ReducerState();export default((gameChatState=defaultState,action)=>{const type=action.type,payload=action.payload;switch(type){case GAME_CHAT_MESSAGE_HISTORY:return gameChatState.update('entities',entities=>{return arrToMap(payload,MessageRecord);});case GAME_CHAT_MESSAGE_ADDED:const messages=gameChatState.setIn(['entities',payload.id],new MessageRecord(payload));return messages.update('entities',entities=>{return messages.entities.sortBy(it=>it.get('date')).reverse();});default:return gameChatState;}});","map":{"version":3,"sources":["/Users/yaroslavudodov/Code/f4e/ssr/client/src/reducer/game-chat.ts"],"names":["OrderedMap","Record","GAME_CHAT_MESSAGE_ADDED","GAME_CHAT_MESSAGE_HISTORY","arrToMap","ReducerState","loading","entities","MessageRecord","id","text","username","date","defaultState","gameChatState","action","type","payload","update","messages","setIn","sortBy","it","get","reverse"],"mappings":"AAAA;AACA,OAAQA,UAAR,CAAoBC,MAApB,KAAiC,WAAjC,CACA,OAAQC,uBAAR,CAAiCC,yBAAjC,KAAiE,cAAjE,CACA,OAAQC,QAAR,KAAuB,oBAAvB,CAEA,KAAMC,CAAAA,YAAY,CAAGJ,MAAM,CAAC,CAC1BK,OAAO,CAAE,KADiB,CAE1BC,QAAQ,CAAE,GAAIP,CAAAA,UAAJ,CAAe,EAAf,CAFgB,CAAD,CAA3B,CAKA,KAAMQ,CAAAA,aAAa,CAAGP,MAAM,CAAC,CAC3BQ,EAAE,CAAE,IADuB,CAE3BC,IAAI,CAAE,IAFqB,CAG3BC,QAAQ,CAAE,IAHiB,CAI3BC,IAAI,CAAE,IAJqB,CAAD,CAA5B,CAOA,KAAMC,CAAAA,YAAY,CAAG,GAAIR,CAAAA,YAAJ,EAArB,CAEA,eAAe,CAACS,aAAa,CAAGD,YAAjB,CAA+BE,MAA/B,GAA0C,MAChDC,CAAAA,IADgD,CAC/BD,MAD+B,CAChDC,IADgD,CAC1CC,OAD0C,CAC/BF,MAD+B,CAC1CE,OAD0C,CAEvD,OAAQD,IAAR,EACE,IAAKb,CAAAA,yBAAL,CACE,MAAOW,CAAAA,aAAa,CAACI,MAAd,CAAqB,UAArB,CAAkCX,QAAD,EAAc,CACpD,MAAOH,CAAAA,QAAQ,CAACa,OAAD,CAAUT,aAAV,CAAf,CACD,CAFM,CAAP,CAGF,IAAKN,CAAAA,uBAAL,CACE,KAAMiB,CAAAA,QAAQ,CAAGL,aAAa,CAACM,KAAd,CACb,CAAC,UAAD,CAAaH,OAAO,CAACR,EAArB,CADa,CAEb,GAAID,CAAAA,aAAJ,CAAkBS,OAAlB,CAFa,CAAjB,CAGA,MAAOE,CAAAA,QAAQ,CAACD,MAAT,CAAgB,UAAhB,CAA6BX,QAAD,EAAa,CAC9C,MAAOY,CAAAA,QAAQ,CAACZ,QAAT,CAAkBc,MAAlB,CAA0BC,EAAD,EAAMA,EAAE,CAACC,GAAH,CAAO,MAAP,CAA/B,EAA+CC,OAA/C,EAAP,CACD,CAFM,CAAP,CAGF,QACE,MAAOV,CAAAA,aAAP,CAbJ,CAeD,CAjBD","sourcesContent":["// @ts-nocheck\nimport {OrderedMap, Record} from 'immutable';\nimport {GAME_CHAT_MESSAGE_ADDED, GAME_CHAT_MESSAGE_HISTORY} from '../constants';\nimport {arrToMap} from '../helpers/helpers';\n\nconst ReducerState = Record({\n  loading: false,\n  entities: new OrderedMap({}),\n});\n\nconst MessageRecord = Record({\n  id: null,\n  text: null,\n  username: null,\n  date: null,\n});\n\nconst defaultState = new ReducerState();\n\nexport default (gameChatState = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n    case GAME_CHAT_MESSAGE_HISTORY:\n      return gameChatState.update('entities', (entities) => {\n        return arrToMap(payload, MessageRecord);\n      });\n    case GAME_CHAT_MESSAGE_ADDED:\n      const messages = gameChatState.setIn(\n          ['entities', payload.id],\n          new MessageRecord(payload));\n      return messages.update('entities', (entities)=> {\n        return messages.entities.sortBy((it)=>it.get('date')).reverse();\n      });\n    default:\n      return gameChatState;\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}