{"ast":null,"code":"// @ts-nocheck\n/**\n * Football teem service\n */class Teems{/**\n   * Get a random integer between `min` and `max`.\n   *\n   * @param {number} min - min number\n   * @param {number} max - max number\n   * @return {number} a random integer\n   */ /**\n   * Init amount of players\n   * @param {number} players\n   */constructor(players){this.players=void 0;this.randomInt=(min,max)=>Math.floor(Math.random()*(max-min+1)+min);this.tacticOrders={2:[1,1],3:[1,2],4:[1,2,1],5:[1,3,1],6:[1,3,2],7:[1,3,2,1],8:[1,3,3,1],9:[1,3,1,3,1],10:[1,3,2,3,1],11:[[1,4,4,2],[1,4,3,3]]};if(isNaN(players)||players<0){throw Error('Invalid parameter, should be number and > 0');}this.players=players;}/**\n   * Calculate number of player for each teem\n   * @return {number[]}\n   */splitOnTeems(){if(this.players%2){const oddPlayers=(this.players-1)/2;return[oddPlayers+1,oddPlayers];}else{const evenPlayers=this.players/2;return[evenPlayers,evenPlayers];}}/**\n   * Form tactic orders\n   * @return {Array}\n   */formGameOrder(){const teems=this.splitOnTeems();const orders=[];teems.forEach((it,index)=>{const order=Array.isArray(this.tacticOrders[it][0])?this.tacticOrders[it][this.randomInt(0,this.tacticOrders[it].length-1)]:this.tacticOrders[it];orders.push(order);});return orders;}}export default Teems;","map":{"version":3,"sources":["/Users/yaroslavudodov/Code/f4e/ssr/client/src/services/teems.ts"],"names":["Teems","constructor","players","randomInt","min","max","Math","floor","random","tacticOrders","isNaN","Error","splitOnTeems","oddPlayers","evenPlayers","formGameOrder","teems","orders","forEach","it","index","order","Array","isArray","length","push"],"mappings":"AAAA;AACA;;GAGA,KAAMA,CAAAA,KAAM,CAEV;;;;;;KAFU,CAuBV;;;KAIAC,WAAW,CAACC,OAAD,CAAe,MA1B1BA,OA0B0B,aAlB1BC,SAkB0B,CAlBd,CAACC,GAAD,CAAcC,GAAd,GACVC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAAGD,GAAN,CAAY,CAA7B,EAAkCA,GAA7C,CAiBwB,MAhB1BK,YAgB0B,CAhBX,CACb,EAAG,CAAC,CAAD,CAAI,CAAJ,CADU,CAEb,EAAG,CAAC,CAAD,CAAI,CAAJ,CAFU,CAGb,EAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAHU,CAIb,EAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAJU,CAKb,EAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CALU,CAMb,EAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CANU,CAOb,EAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAPU,CAQb,EAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CARU,CASb,GAAI,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CATS,CAUb,GAAI,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAD,CAAe,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAf,CAVS,CAgBW,CACxB,GAAIC,KAAK,CAACR,OAAD,CAAL,EAAkBA,OAAO,CAAG,CAAhC,CAAmC,CACjC,KAAMS,CAAAA,KAAK,CAAC,6CAAD,CAAX,CACD,CACD,KAAKT,OAAL,CAAeA,OAAf,CACD,CACD;;;KAIAU,YAAY,EAAG,CACb,GAAI,KAAKV,OAAL,CAAe,CAAnB,CAAsB,CACpB,KAAMW,CAAAA,UAAU,CAAG,CAAC,KAAKX,OAAL,CAAe,CAAhB,EAAqB,CAAxC,CACA,MAAO,CAACW,UAAU,CAAG,CAAd,CAAiBA,UAAjB,CAAP,CACD,CAHD,IAGO,CACL,KAAMC,CAAAA,WAAW,CAAG,KAAKZ,OAAL,CAAe,CAAnC,CACA,MAAO,CAACY,WAAD,CAAcA,WAAd,CAAP,CACD,CACF,CAED;;;KAIAC,aAAa,EAAG,CACd,KAAMC,CAAAA,KAAK,CAAG,KAAKJ,YAAL,EAAd,CACA,KAAMK,CAAAA,MAAM,CAAG,EAAf,CACAD,KAAK,CAACE,OAAN,CAAc,CAACC,EAAD,CAAKC,KAAL,GAAe,CAC3B,KAAMC,CAAAA,KAAK,CAAGC,KAAK,CAACC,OAAN,CAAc,KAAKd,YAAL,CAAkBU,EAAlB,EAAsB,CAAtB,CAAd,EACZ,KAAKV,YAAL,CAAkBU,EAAlB,EACI,KAAKhB,SAAL,CAAe,CAAf,CAAkB,KAAKM,YAAL,CAAkBU,EAAlB,EAAsBK,MAAtB,CAA+B,CAAjD,CADJ,CADY,CAGR,KAAKf,YAAL,CAAkBU,EAAlB,CAHN,CAIAF,MAAM,CAACQ,IAAP,CAAYJ,KAAZ,EACD,CAND,EAOA,MAAOJ,CAAAA,MAAP,CACD,CA9DS,CAiEZ,cAAejB,CAAAA,KAAf","sourcesContent":["// @ts-nocheck\n/**\n * Football teem service\n */\nclass Teems {\n  players: any;\n  /**\n   * Get a random integer between `min` and `max`.\n   *\n   * @param {number} min - min number\n   * @param {number} max - max number\n   * @return {number} a random integer\n   */\n  randomInt = (min: number, max: number) =>\n    Math.floor(Math.random() * (max - min + 1) + min);\n  tacticOrders = {\n    2: [1, 1],\n    3: [1, 2],\n    4: [1, 2, 1],\n    5: [1, 3, 1],\n    6: [1, 3, 2],\n    7: [1, 3, 2, 1],\n    8: [1, 3, 3, 1],\n    9: [1, 3, 1, 3, 1],\n    10: [1, 3, 2, 3, 1],\n    11: [[1, 4, 4, 2], [1, 4, 3, 3]],\n  };\n  /**\n   * Init amount of players\n   * @param {number} players\n   */\n  constructor(players: any) {\n    if (isNaN(players) || players < 0) {\n      throw Error('Invalid parameter, should be number and > 0');\n    }\n    this.players = players\n  }\n  /**\n   * Calculate number of player for each teem\n   * @return {number[]}\n   */\n  splitOnTeems() {\n    if (this.players % 2) {\n      const oddPlayers = (this.players - 1) / 2;\n      return [oddPlayers + 1, oddPlayers];\n    } else {\n      const evenPlayers = this.players / 2;\n      return [evenPlayers, evenPlayers];\n    }\n  }\n\n  /**\n   * Form tactic orders\n   * @return {Array}\n   */\n  formGameOrder() {\n    const teems = this.splitOnTeems()\n    const orders = []\n    teems.forEach((it, index) => {\n      const order = Array.isArray(this.tacticOrders[it][0]) ?\n        this.tacticOrders[it][\n            this.randomInt(0, this.tacticOrders[it].length - 1)\n        ] : this.tacticOrders[it]\n      orders.push(order)\n    });\n    return orders\n  }\n}\n\nexport default Teems\n"]},"metadata":{},"sourceType":"module"}