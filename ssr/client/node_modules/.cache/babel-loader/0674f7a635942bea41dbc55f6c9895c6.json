{"ast":null,"code":"import*as React from'react';import'./set-city-item.scss';import{connect}from'react-redux';/**\n * Item for autocomplete list\n */class SetCityItem extends React.Component{/**\n   * @return {string} html\n   */render(){const _this$props=this.props,name=_this$props.name,country=_this$props.country,id=_this$props.id,doChoice=_this$props.doChoice;return/*#__PURE__*/React.createElement(\"div\",{className:\"city-item\",onClick:()=>{doChoice({name:name,country:country,id:id});}},this.composeAddress(this.props.name),/*#__PURE__*/React.createElement(\"small\",null,this.composeAddress(this.props.region,', ')),/*#__PURE__*/React.createElement(\"small\",null,this.composeAddress(this.props.country,', ')));}/**\n   * @param {string} value\n   * @param {string} delimiter\n   * @return {*}\n   */composeAddress(value,delimiter=''){if(!value)return'';return/*#__PURE__*/React.createElement(\"span\",null,delimiter+value);}}export default connect(state=>{return{location:state.location};},null)(SetCityItem);","map":{"version":3,"sources":["/Users/yaroslavudodov/Code/f4e/ssr/client/src/components/common/city-picker/set-city-item/set-city-item.tsx"],"names":["React","connect","SetCityItem","Component","render","props","name","country","id","doChoice","composeAddress","region","value","delimiter","state","location"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAO,sBAAP,CACA,OAAQC,OAAR,KAAsB,aAAtB,CAUA;;GAGA,KAAMC,CAAAA,WAAN,QAA0BF,CAAAA,KAAK,CAACG,SAAiB,CAC/C;;KAGAC,MAAM,EAAG,mBAC+B,KAAKC,KADpC,CACAC,IADA,aACAA,IADA,CACMC,OADN,aACMA,OADN,CACeC,EADf,aACeA,EADf,CACmBC,QADnB,aACmBA,QADnB,CAEP,mBACE,2BAAK,SAAS,CAAC,WAAf,CAA2B,OAAO,CAChC,IAAM,CACJA,QAAQ,CAAC,CAACH,IAAI,CAAEA,IAAP,CAAaC,OAAO,CAAEA,OAAtB,CAA+BC,EAAE,CAAEA,EAAnC,CAAD,CAAR,CACD,CAHH,EAII,KAAKE,cAAL,CAAoB,KAAKL,KAAL,CAAWC,IAA/B,CAJJ,cAKE,iCAAS,KAAKI,cAAL,CAAoB,KAAKL,KAAL,CAAWM,MAA/B,CAAuC,IAAvC,CAAT,CALF,cAME,iCAAS,KAAKD,cAAL,CAAoB,KAAKL,KAAL,CAAWE,OAA/B,CAAwC,IAAxC,CAAT,CANF,CADF,CAUD,CAED;;;;KAKAG,cAAc,CAACE,KAAD,CAAaC,SAAS,CAAG,EAAzB,CAA6B,CACzC,GAAI,CAACD,KAAL,CAAY,MAAO,EAAP,CACZ,mBAAO,gCAAOC,SAAS,CAAGD,KAAnB,CAAP,CACD,CA1B8C,CA6BjD,cAAeX,CAAAA,OAAO,CACjBa,KAAD,EAA4B,CAC1B,MAAO,CACLC,QAAQ,CAAED,KAAK,CAACC,QADX,CAAP,CAGD,CALiB,CAKf,IALe,CAAP,CAMbb,WANa,CAAf","sourcesContent":["import * as React from 'react'\nimport './set-city-item.scss'\nimport {connect} from 'react-redux'\n\ninterface Props {\n  name?: string,\n  country?: string,\n  region?: string,\n  doChoice: any,\n  id: number,\n}\n\n/**\n * Item for autocomplete list\n */\nclass SetCityItem extends React.Component<Props> {\n  /**\n   * @return {string} html\n   */\n  render() {\n    const {name, country, id, doChoice} = this.props;\n    return (\n      <div className=\"city-item\" onClick={\n        () => {\n          doChoice({name: name, country: country, id: id})\n        }}>\n        { this.composeAddress(this.props.name) }\n        <small>{ this.composeAddress(this.props.region, ', ') }</small>\n        <small>{ this.composeAddress(this.props.country, ', ') }</small>\n      </div>\n    )\n  }\n\n  /**\n   * @param {string} value\n   * @param {string} delimiter\n   * @return {*}\n   */\n  composeAddress(value: any, delimiter = '') {\n    if (!value) return ''\n    return <span>{delimiter + value}</span>\n  }\n}\n\nexport default connect(\n    (state: {location: any}) => {\n      return {\n        location: state.location,\n      }\n    }, null\n)(SetCityItem)\n"]},"metadata":{},"sourceType":"module"}